let Writer = require("writer")
let Reader = require("reader")

let VERSION = "nasso's tar v1.0.0"

let flags, path = ...

fn printUsage() {
  let p = "  "..arg[0]
  print(VERSION)
  print("Usage:")
  print(p.." c[v]f <archive> <files> ...")
  print(p.." x[v]f <archive>")
  print(p.." t[v]f <archive>")
}

fn startsWith(a: any, prefix: any) {
  return string.sub(a, 1, #prefix) == prefix
}

fn hasFlag(f: any) {
  return string.find(flags, f, 1, true) != nil
}

fn parseMode(modes: any) {
  let mode = nil
  for (i = 1, #modes) {
    let m = string.sub(modes, i, i)
    if (hasFlag(m)) {
      if (mode) { return nil }
      mode = m
    }
  }
  return mode
}

if (
  !flags ||
  flags == "-h" ||
  flags == "--help"
) {
  printUsage()
  return
}

if (flags == "--version") {
  print(VERSION)
  return
}

if (!path) {
  printUsage()
  return
}

let verbose = hasFlag("v")
let mode = parseMode("cxt")
let cwd = shell.dir()
let aPath = shell.resolve(path)

if (mode == "c") {
  let paths = any { select(3, ...) }

  if (fs.exists(aPath)) {
    error("File exists: "..path, 0)
  }

  let file, emsg = fs.open(aPath, "wb")
  if (!file) {
    error(emsg, 0)
  }
  let writer = Writer.new(file.write)

  fn cancel(msg: any) {
    file.close()
    fs.delete(aPath)
    error(msg, 0)
  }

  fn appendFile(path: any) {
    let aPath = shell.resolve(path)

    if (!startsWith(aPath, cwd)) {
      cancel("Not in current dir: "..path)
    }

    if (fs.isDir(aPath)) {
      ; directory, recurse
      let fileNames = fs.list(aPath)
      for (_, name in ipairs(fileNames)) {
        appendFile(fs.combine(path, name))
      }
      return
    }

    ; regular file (supposedly)
    let file, emsg = fs.open(aPath, "rb")

    if (!file) {
      error(emsg, 0)
    }

    let data = file.readAll()
    file.close()

    let attributes = fs.attributes(aPath)

    Writer.append(writer, any {
      path = path,
      modified = attributes.modified / 1000,
      data = data,
    })

    if (verbose) {
      print(path)
    }
  }

  for (_, path in ipairs(paths)) {
    appendFile(path)
  }

  Writer.finish(writer)
  file.close()
} elseif (mode == "t" || mode == "x") {
  let file, emsg = fs.open(aPath, "rb")
  if (!file) {
    error(emsg, 0)
  }
  let reader = Reader.new(
    file.read,
    fn(n: any) {
      file.seek("cur", n)
    },
  )

  for (entry in Reader.entries(reader)) {
    if (mode == "x") {
      let aPath = shell.resolve(entry.path)

      if (!startsWith(aPath, cwd)) {
        error(
          "Illegal path: "..entry.path,
          0,
        )
      }

      if (fs.exists(aPath)) {
        error(
          "File exists: "..entry.path,
          0,
        )
      }

      if (entry.isDir) {
        fs.makeDir(aPath)
      } else {
        let file, emsg = fs.open(aPath, "wb")
        if (!file) {
          error(emsg, 0)
        }
        file.write(entry.getData())
        file.close()
      }

      if (verbose) {
        print(entry.path)
      }
    } else {
      if (verbose) {
        print(string.format(
          "%s % 6d %s %s",
          entry.isDir && "d" || "-",
          entry.size,
          os.date("!%F %TZ", entry.modified),
          entry.path,
        ))
      } else {
        print(entry.path)
      }
    }
  }

  file.close()
} else {
  printUsage()
}
