let VERSION = "0.1.0"

let CWD = "/" .. shell.dir()
let DEFAULT_INSTALL_DIR = any {
  executable = "/bin",
  library = "/lib",
}

let args = any { ... }
let opts = any {}
opts.tcc = "tcc"
opts.ll = "ll"
opts.name = nil
opts.dryRun = false
opts.verbose = false
opts.yes = false
opts.install = false
opts.installLocation = nil
opts.target = nil

let i = 1
while (i <= #args) {
  let arg = args[i]
  if (arg == "--dry-run") {
    opts.dryRun = true
  } elseif (arg == "--verbose" || arg == "-v") {
    opts.verbose = true
  } elseif (arg == "--yes" || arg == "-y") {
    opts.yes = true
  } elseif (arg == "--install" || arg == "-i") {
    opts.install = true
  } elseif (arg == "--install-to") {
    opts.install = true
    i = i + 1
    arg = args[i]
    opts.installLocation = "/" .. shell.resolve(arg)
  } elseif (arg == "--tcc") {
    i = i + 1
    arg = args[i]
    opts.tcc = "/" .. shell.resolve(arg)
  } elseif (arg == "--ll") {
    i = i + 1
    arg = args[i]
    opts.ll = "/" .. shell.resolve(arg)
  } elseif (arg == "--name") {
    i = i + 1
    arg = args[i]
    opts.name = arg
  } elseif (!opts.target) {
    opts.target = arg
  } else {
    error("unexpected argument '" .. arg .. "'", 0)
  }
  i = i + 1
}

fn exec(cmd: any, ...) {
  if (opts.verbose) { print(cmd, ...) }
  if (opts.dryRun) { return }

  if (cmd == "mkdir") {
    fs.makeDir(...)
  } else {
    shell.execute(cmd, ...)
  }
}

fn validateTarget(t: any) {
  assert(#t.files > 0, "target '" .. t.name .. "' doesn't have any file")

  let entryCount = 0
  for (_, f in ipairs(t.files)) {
    if (f.entry) { entryCount = entryCount + 1 }
  }

  if (entryCount == 0) {
    error("target '" .. t.name .. "' is missing an entry point", 0)
  } elseif (entryCount > 1) {
    error("target '" .. t.name .. "' has more than one entry point", 0)
  }
}

fn loadRecipe(path: any) {
  path = path || shell.resolve("Recipe")

  let dir = fs.getDir(path)
  let r = any {}
  r.defaultTarget = nil
  r.targets = any {}

  let env = any {}
  let curTarget = nil
  env.target = fn(name: any) {
    assert(type(name) == "string", "target name must be a string")
    assert(!r.targets[name], "redefinition of target '" .. name .. "'")

    if (curTarget) {
      validateTarget(curTarget)
    }

    let t = any {}
    t.dir = "/" .. dir
    t.name = name
    t.kind = "library"
    t.static = true
    t.files = any {}
    t.libs = any {}
    t.libdirs = any {}

    r.targets[name] = t
    curTarget = t

    if (!r.defaultTarget) {
      r.defaultTarget = name
    }
  }
  env.kind = fn(kind: any) {
    assert(curTarget, "no target")

    if (
      kind != "executable" &&
      kind != "library"
    ) {
      error("invalid target kind: '" .. kind .. "'", 0)
    }

    curTarget.kind = kind
  }
  env.static = fn(v: any) {
    assert(curTarget, "no target")
    assert(type(v) == "boolean", "value for 'static' must be a boolean")

    curTarget.static = v
  }
  env.executable = fn(name: any) {
    env.target(name)
    env.kind("executable")
    env.static(true)
  }
  env.library = fn(name: any) {
    env.target(name)
    env.kind("library")
    env.static(false)
  }
  env.files = fn(list: any) {
    assert(curTarget, "no target")

    let o = #curTarget.files
    for (i = 1, #list) {
      let def = list[i]

      if (type(def) == "string") {
        def = any { path = def }
      }

      def.absPath = "/" .. fs.combine(curTarget.dir, def.path)
      curTarget.files[o + i] = def
    }
  }
  env.libdirs = fn(list: any) {
    assert(curTarget, "no target")

    let o = #curTarget.libdirs
    for (i = 1, #list) {
      curTarget.libdirs[o + i] = list[i]
    }
  }
  env.libs = fn(list: any) {
    assert(curTarget, "no target")

    let o = #curTarget.libs
    for (i = 1, #list) {
      curTarget.libs[o + i] = list[i]
    }
  }
  env.entry = fn(path: any) {
    let f = any {}
    f.entry = true
    f.path = path
    return f
  }

  loadfile(path, "t", env)()
  assert(curTarget, "recipe doesn't contain any target")
  validateTarget(curTarget)
  return r
}

let recipe = loadRecipe()
let targetName = opts.target || recipe.defaultTarget
let target = recipe.targets[targetName]

assert(target, "target '" .. targetName .. "' doesn't exist")

let lflags = any {}
let lfiles = any {}

if (target.static) {
  for (_, dir in ipairs(target.libdirs)) {
    lflags[#lflags + 1] = string.format("-L%s", dir)
  }

  for (_, lib in ipairs(target.libs)) {
    lflags[#lflags + 1] = string.format("-l%s", lib)
  }
}

for (_, f in ipairs(target.files)) {
  let srcPath = f.absPath

  if (CWD != "") {
    ; skip one for the last char and one for the `/` = skip 2
    srcPath = string.sub(srcPath, #CWD + 2)
  }

  let dstName = string.gsub(srcPath, "%.tc$", ".lua")
  let dstPath = fs.combine("target", "lua", target.name, dstName)
  let dstParent = fs.getDir(dstPath)

  if (f.entry) {
    ; entry point must be specified first
    table.insert(lfiles, 1, dstPath)
  } else {
    lfiles[#lfiles + 1] = dstPath
  }

  print(string.format("TCC     %s", dstName))

  exec("mkdir", dstParent)
  exec(opts.tcc, "--emit", "lua", "-o", dstPath, srcPath)
}

let linker = any {
  bundle = opts.ll,
  library = opts.ll,
  executable = opts.tcc,
}
linker = linker[target.kind]

if (!linker) {
  error("unknown target kind: " .. target.kind)
}

let outputName = opts.name || target.name
let outputPath = fs.combine("target", outputName)
let cmd = any {
  linker, "-o", outputPath
}

for (_, f in ipairs(lfiles)) {
  cmd[#cmd + 1] = f
}
for (_, f in ipairs(lflags)) {
  cmd[#cmd + 1] = f
}

exec(table.unpack(cmd))

if (opts.install) {
  let absOutputPath = "/" .. shell.resolve(outputPath)
  let installDir = opts.installLocation || DEFAULT_INSTALL_DIR[target.kind]
  let installPath = "/" .. fs.combine(installDir, outputName)
  let confirm = opts.yes

  if (!confirm) {
    if (fs.exists(installPath)) {
      print("File already exists: " .. installPath)
      write("Override? [y/N]: ")
      let a = string.byte(read(), 1)
      confirm = a == 'y' || a == 'Y'
    } else {
      confirm = true
    }
  }

  if (confirm) {
    print(outputPath .. " -> " .. installPath)

    if (!opts.dryRun && absOutputPath != installPath) {
      fs.delete(installPath)
      fs.copy(absOutputPath, installPath)
    } elseif (opts.dryRun) {
      print("Installation skipped because of --dry-run")
    }
  }
}
